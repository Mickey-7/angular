import { Component, OnInit } from "@angular/core";
import { UserService } from "src/app/services/user.service";
import { User } from "src/app/interface/user";

@Component({
  selector: "app-users",
  templateUrl: "./users.component.html",
  styles: []
})
export class UsersComponent implements OnInit {
  //need to create users:User[] for storage
  //which will be use for .html *ngFor="let user of users"
  //second
  users: User[];
  //empty object for new added user
  //5th
  newUser: any = {};
  //show add user form
  //6th
  userForm: boolean = false;
  //determine if user is new
  //7th
  isNewUser: boolean;
  //empty object fro the user to be edited
  //10th
  editedUser: any = {};
  //show edit user form
  //11th
  editUserForm: boolean = false;

  //importing the service class so that we can use all of its CRUD methods
  //first
  constructor(private userService: UserService) {}

  ngOnInit(): void {
    //creating a method that will connect users and service on initialization
    //getUsers() will have an underline, just hover and quick fix and create method
    //third
    this.users = this.getUsers();
  }
  getUsers(): User[] {
    //remove the autogenerated message and type below
    //needed code to call the method of the service
    //fourth
    return this.userService.getUsersFromData();
  }

  //this is use for *ngIf in th .html code
  //enabling add user form
  //8th
  showAddUserForm() {
    if (this.users.length) {
      this.newUser = {};
    }
    this.isNewUser = true;
    this.userForm = true;
  }

  //9th
  saveUser(user: User) {
    if (this.newUser) {
      //calling add method from service
      this.userService.addUser(user);
    }
    //need to close userFrom after add
    this.userForm = false;
  }

  //12th
  showEditUserForm(user: User) {
    if (!user) {
      this.userForm = false;
      return;
    }
    //enabling to show edit user form
    this.editUserForm = true;
    //setting the clicked user to the empty user to be edited
    this.editedUser = user;
  }

  //13th
  updateUser(user: User) {
    //calling update method from service
    this.userService.updateUser(this.editedUser);
    //closing edit user form
    this.editUserForm = false;
    //setting the editedUser to blank form after edit
    this.editedUser = {};
  }

  //14th
  removeUser(user: User) {
    this.userService.deleteUser(user);
  }

  //15th
  cancelEdits() {
    //setting edited user to blank form
    this.editedUser = {};
    //closing edit user form
    this.editUserForm = false;
  }

  //16th
  cancelNewUser() {
    //setting new added user to blank form
    this.newUser = {};
    //closing add new user form
    this.userForm = false;
  }
}
